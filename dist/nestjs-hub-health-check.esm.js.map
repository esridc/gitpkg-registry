{"version":3,"file":"nestjs-hub-health-check.esm.js","sources":["../src/health/constants.ts","../src/health/health.controller.ts","../src/health/health.module.ts"],"sourcesContent":["export const HEALTH_CHECK_OPTIONS = 'HEALTH_CHECK_OPTIONS';","import { ModuleRef } from '@nestjs/core';\nimport { Controller, Get, Inject } from '@nestjs/common';\nimport { HealthCheck, HealthCheckService, HealthCheckResult, TypeOrmHealthIndicator, HealthIndicatorResult } from '@nestjs/terminus';\nimport { HEALTH_CHECK_OPTIONS } from './constants'\n\nexport type DatabaseCheckDef = {\n  /**\n   * Health check type\n   */\n  type: 'database'\n}\n\nexport type CheckDef = DatabaseCheckDef\n\nexport type HealthCheckOptions = {\n  /**\n   * Health checks\n   */\n  checks: CheckDef[]\n}\n\n\ntype HealthChecker = () => Promise<HealthIndicatorResult>\n\n@Controller('health')\nexport class HealthController {\n  checkers: HealthChecker[];\n\n  constructor(\n    private health: HealthCheckService,\n    private modelRef: ModuleRef,\n    @Inject(HEALTH_CHECK_OPTIONS) private options?: HealthCheckOptions\n  ) { \n    const checkDefs = this.options?.checks ?? []\n    this.checkers = checkDefs.map((check) => this.getChecker(check))\n  }\n\n  @Get()\n  @HealthCheck()\n  check(): Promise<HealthCheckResult> {\n    return this.health.check(this.checkers);\n  }\n\n  getChecker(definition: CheckDef): HealthChecker {\n    switch (definition.type) {\n      case 'database':\n        const db = this.modelRef.get(TypeOrmHealthIndicator)\n        return () => db.pingCheck('database')\n      default:\n        throw new Error(`Invalid health check type \"${definition.type}\"`)\n    }\n  }\n}\n","import { Module, DynamicModule } from '@nestjs/common';\nimport { TerminusModule } from '@nestjs/terminus';\nimport { HealthController, HealthCheckOptions } from './health.controller';\nimport { HEALTH_CHECK_OPTIONS } from './constants';\n\n@Module({})\nexport class HealthModule {\n  static forRoot(options?: HealthCheckOptions): DynamicModule {\n    return {\n      module: HealthModule,\n      controllers: [HealthController],\n      imports: [\n        TerminusModule\n      ],\n      providers: [\n        { \n          provide: HEALTH_CHECK_OPTIONS,\n          useValue: options\n        }\n      ]\n    };\n  }\n}\n"],"names":["HEALTH_CHECK_OPTIONS","HealthController","health","modelRef","options","checkDefs","checks","checkers","map","check","getChecker","definition","type","db","get","TypeOrmHealthIndicator","pingCheck","Error","__decorate","Get","HealthCheck","Controller","__param","Inject","HealthCheckService","ModuleRef","HealthModule","forRoot","module","HealthModule_1","controllers","imports","TerminusModule","providers","provide","useValue","Module"],"mappings":";;;;;AAAO,IAAMA,oBAAoB,GAAG,sBAA7B;;ICyBMC,gBAAgB;AAG3B,4BACUC,MADV,EAEUC,QAFV,EAGwCC,OAHxC;;;;;AACU,eAAA,GAAAF,MAAA;AACA,iBAAA,GAAAC,QAAA;AAC8B,gBAAA,GAAAC,OAAA;AAEtC,QAAMC,SAAS,4CAAG,KAAKD,OAAR,qBAAG,cAAcE,MAAjB,mCAA2B,EAA1C;AACA,SAAKC,QAAL,GAAgBF,SAAS,CAACG,GAAV,CAAc,UAACC,KAAD;AAAA,aAAW,KAAI,CAACC,UAAL,CAAgBD,KAAhB,CAAX;AAAA,KAAd,CAAhB;AACD;;AAV0B;;AAAA,SAc3BA,KAd2B,GAc3B;AACE,WAAO,KAAKP,MAAL,CAAYO,KAAZ,CAAkB,KAAKF,QAAvB,CAAP;AACD,GAhB0B;;AAAA,SAkB3BG,UAlB2B,GAkB3B,oBAAWC,UAAX;AACE,YAAQA,UAAU,CAACC,IAAnB;AACE,WAAK,UAAL;AACE,YAAMC,EAAE,GAAG,KAAKV,QAAL,CAAcW,GAAd,CAAkBC,sBAAlB,CAAX;AACA,eAAO;AAAA,iBAAMF,EAAE,CAACG,SAAH,CAAa,UAAb,CAAN;AAAA,SAAP;;AACF;AACE,cAAM,IAAIC,KAAJ,kCAAwCN,UAAU,CAACC,IAAnD,QAAN;AALJ;AAOD,GA1B0B;;AAAA;AAAA,GAA7B;;AAcEM,YAFCC,GAAG,IACHC,WAAW,mKACZ;;AAdWnB,gBAAgB,yCAD5BoB,UAAU,CAAC,QAAD,gBAONC,wBAAAC,MAAM,CAACvB,oBAAD,kDAFSwB,oBACEC,sBALTxB,iBAAA;;;;ACnBb,IAAayB,YAAY;;;eAChBC,UAAP,iBAAevB,OAAf;AACE,WAAO;AACLwB,MAAAA,MAAM,EAAEC,cADH;AAELC,MAAAA,WAAW,EAAE,CAAC7B,gBAAD,CAFR;AAGL8B,MAAAA,OAAO,EAAE,CACPC,cADO,CAHJ;AAMLC,MAAAA,SAAS,EAAE,CACT;AACEC,QAAAA,OAAO,EAAElC,oBADX;AAEEmC,QAAAA,QAAQ,EAAE/B;AAFZ,OADS;AANN,KAAP;AAaD;;;GAfH;;AAAasB,YAAY,0DADxBU,MAAM,CAAC,EAAD,IACMV,aAAA;;;;"}