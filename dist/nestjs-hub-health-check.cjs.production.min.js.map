{"version":3,"file":"nestjs-hub-health-check.cjs.production.min.js","sources":["../src/health/health.controller.ts","../src/health/constants.ts","../src/health/health.module.ts"],"sourcesContent":["import { ModuleRef } from '@nestjs/core';\nimport { Controller, Get, Inject } from '@nestjs/common';\nimport { HealthCheck, HealthCheckService, HealthCheckResult, TypeOrmHealthIndicator, HealthIndicatorResult } from '@nestjs/terminus';\nimport { HEALTH_CHECK_OPTIONS } from './constants'\n\nexport type DatabaseCheckDef = {\n  /**\n   * Health check type\n   */\n  type: 'database'\n}\n\nexport type CheckDef = DatabaseCheckDef\n\nexport type HealthCheckOptions = {\n  /**\n   * Health checks\n   */\n  checks: CheckDef[]\n}\n\n\ntype HealthChecker = () => Promise<HealthIndicatorResult>\n\n@Controller('health')\nexport class HealthController {\n  checkers: HealthChecker[];\n\n  constructor(\n    private health: HealthCheckService,\n    private modelRef: ModuleRef,\n    @Inject(HEALTH_CHECK_OPTIONS) private options?: HealthCheckOptions\n  ) { \n    const checkDefs = this.options?.checks ?? []\n    this.checkers = checkDefs.map((check) => this.getChecker(check))\n  }\n\n  @Get()\n  @HealthCheck()\n  check(): Promise<HealthCheckResult> {\n    return this.health.check(this.checkers);\n  }\n\n  getChecker(definition: CheckDef): HealthChecker {\n    switch (definition.type) {\n      case 'database':\n        const db = this.modelRef.get(TypeOrmHealthIndicator)\n        return () => db.pingCheck('database')\n      default:\n        throw new Error(`Invalid health check type \"${definition.type}\"`)\n    }\n  }\n}\n","export const HEALTH_CHECK_OPTIONS = 'HEALTH_CHECK_OPTIONS';","import { Module, DynamicModule } from '@nestjs/common';\nimport { TerminusModule } from '@nestjs/terminus';\nimport { HealthController, HealthCheckOptions } from './health.controller';\nimport { HEALTH_CHECK_OPTIONS } from './constants';\n\n@Module({})\nexport class HealthModule {\n  static forRoot(options?: HealthCheckOptions): DynamicModule {\n    return {\n      module: HealthModule,\n      controllers: [HealthController],\n      imports: [\n        TerminusModule\n      ],\n      providers: [\n        { \n          provide: HEALTH_CHECK_OPTIONS,\n          useValue: options\n        }\n      ]\n    };\n  }\n}\n"],"names":["HealthController","health","modelRef","options","checkDefs","this","_this$options","checks","checkers","map","check","_this","getChecker","definition","type","db","get","TypeOrmHealthIndicator","pingCheck","Error","__decorate","Get","HealthCheck","Controller","__param","Inject","HealthCheckService","ModuleRef","HealthModule","forRoot","module","HealthModule_1","controllers","imports","TerminusModule","providers","provide","useValue","Module"],"mappings":"iLAyBaA,+CAIDC,EACAC,EAC8BC,8BAF9BF,gBACAC,eAC8BC,MAEhCC,oBAAYC,KAAKF,gBAALG,EAAcC,UAAU,QACrCC,SAAWJ,EAAUK,KAAI,SAACC,UAAUC,EAAKC,WAAWF,iCAK3DA,MAAA,kBACSL,KAAKJ,OAAOS,MAAML,KAAKG,aAGhCI,WAAA,SAAWC,UACDA,EAAWC,UACZ,eACGC,EAAKV,KAAKH,SAASc,IAAIC,iCACtB,kBAAMF,EAAGG,UAAU,2BAEpB,IAAIC,oCAAoCN,EAAWC,iBAV/DM,cAFCC,QACAC,sLAbUtB,uCADZuB,aAAW,UAOPC,YAAAC,SC/B+B,2DD6BhBC,qBACEC,sBALT3B,0BEnBA4B,yDACJC,QAAP,SAAe1B,SACN,CACL2B,OAAQC,EACRC,YAAa,CAAChC,0BACdiC,QAAS,CACPC,kBAEFC,UAAW,CACT,CACEC,QDhB0B,uBCiB1BC,SAAUlC,WAXPyB,qCADZU,SAAO,KACKV"}