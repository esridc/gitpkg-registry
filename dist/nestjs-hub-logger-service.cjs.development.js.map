{"version":3,"file":"nestjs-hub-logger-service.cjs.development.js","sources":["../src/index.ts"],"sourcesContent":["import { LoggerService, Injectable } from '@nestjs/common';\nimport { HubLogger, IHubLoggerOptions, IJsonLoggingOptions, LogLevel } from 'hub-logger';\n\n/**\n * A hub logger service for nestjs\n */\n@Injectable()\nclass HubLoggerService implements LoggerService {\n  hubLogger: HubLogger\n\n  constructor(options?: IHubLoggerOptions) {\n    this.hubLogger = new HubLogger(options);\n  }\n\n  /**\n   * Log an info level messgae.\n   * @param message log message\n   */\n  log(message: string) {\n    this.hubLogger.info(message);\n  }\n\n  /**\n   * Log an error level message.\n   * @param message log message\n   * @param trace error trace\n   */\n  error(message: string, trace: string) {\n    this.hubLogger.error(message, {\n      trace\n    });\n  }\n\n  /**\n   * Log a warn level message.\n   * @param message log message\n   */\n  warn(message: string) {\n    this.hubLogger.warn(message);\n  }\n\n  /**\n   * Log a debug level message.\n   * @param message log message\n   */\n  debug(message: string) {\n    this.hubLogger.debug(message);\n  }\n\n  /**\n   * A dummy function that actually logs a debug level message.\n   * @param message log message\n   */\n  verbose(message: string) {\n    // reduce the number of actual log levels\n    this.debug(message);\n  }\n\n  /**\n   * Log a json object for debugging.\n   * @param data json data\n   * @param options logging options\n   */\n  json(data: any, options: IJsonLoggingOptions = { level: 'debug' }) {\n    this.hubLogger.json(data, options)\n  }\n\n  /**\n   * Create an expressjs middleware for HTTP request logging.\n   * @returns a logger middleware\n   */\n  createRequestLogger () {\n    return this.hubLogger.createRequestLogger()\n  }\n}\n\nexport { HubLoggerService, IHubLoggerOptions, IJsonLoggingOptions, LogLevel }"],"names":["HubLoggerService","options","hubLogger","HubLogger","log","message","info","error","trace","warn","debug","verbose","json","data","level","createRequestLogger","Injectable"],"mappings":";;;;;;;;AAGA;;;;AAIMA,wBAAgB;AAGpB,4BAAYC,OAAZ;AACE,SAAKC,SAAL,GAAiB,IAAIC,mBAAJ,CAAcF,OAAd,CAAjB;AACD;AAED;;;;;;AAPoB;;AAAA,SAWpBG,GAXoB,GAWpB,aAAIC,OAAJ;AACE,SAAKH,SAAL,CAAeI,IAAf,CAAoBD,OAApB;AACD;AAED;;;;;AAfoB;;AAAA,SAoBpBE,KApBoB,GAoBpB,eAAMF,OAAN,EAAuBG,KAAvB;AACE,SAAKN,SAAL,CAAeK,KAAf,CAAqBF,OAArB,EAA8B;AAC5BG,MAAAA,KAAK,EAALA;AAD4B,KAA9B;AAGD;AAED;;;;AA1BoB;;AAAA,SA8BpBC,IA9BoB,GA8BpB,cAAKJ,OAAL;AACE,SAAKH,SAAL,CAAeO,IAAf,CAAoBJ,OAApB;AACD;AAED;;;;AAlCoB;;AAAA,SAsCpBK,KAtCoB,GAsCpB,eAAML,OAAN;AACE,SAAKH,SAAL,CAAeQ,KAAf,CAAqBL,OAArB;AACD;AAED;;;;AA1CoB;;AAAA,SA8CpBM,OA9CoB,GA8CpB,iBAAQN,OAAR;AACE;AACA,SAAKK,KAAL,CAAWL,OAAX;AACD;AAED;;;;;AAnDoB;;AAAA,SAwDpBO,IAxDoB,GAwDpB,cAAKC,IAAL,EAAgBZ,OAAhB;QAAgBA;AAAAA,MAAAA,UAA+B;AAAEa,QAAAA,KAAK,EAAE;AAAT;;;AAC7C,SAAKZ,SAAL,CAAeU,IAAf,CAAoBC,IAApB,EAA0BZ,OAA1B;AACD;AAED;;;;AA5DoB;;AAAA,SAgEpBc,mBAhEoB,GAgEpB;AACE,WAAO,KAAKb,SAAL,CAAea,mBAAf,EAAP;AACD,GAlEmB;;AAAA;AAAA;;AAAhBf,wBAAgB,+CADrBgB,iBAAU,KACLhB,yBAAA"}