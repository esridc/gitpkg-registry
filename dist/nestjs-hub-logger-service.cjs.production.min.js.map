{"version":3,"file":"nestjs-hub-logger-service.cjs.production.min.js","sources":["../src/index.ts"],"sourcesContent":["import { LoggerService, Injectable } from '@nestjs/common';\nimport { HubLogger, IHubLoggerOptions, IJsonLoggingOptions, LogLevel } from 'hub-logger';\n\n/**\n * A hub logger service for nestjs\n */\n@Injectable()\nclass HubLoggerService implements LoggerService {\n  hubLogger: HubLogger\n\n  constructor(options?: IHubLoggerOptions) {\n    this.hubLogger = new HubLogger(options);\n  }\n\n  /**\n   * Log an info level messgae.\n   * @param message log message\n   */\n  log(message: string) {\n    this.hubLogger.info(message);\n  }\n\n  /**\n   * Log an error level message.\n   * @param message log message\n   * @param trace error trace\n   */\n  error(message: string, trace: string) {\n    this.hubLogger.error(message, {\n      trace\n    });\n  }\n\n  /**\n   * Log a warn level message.\n   * @param message log message\n   */\n  warn(message: string) {\n    this.hubLogger.warn(message);\n  }\n\n  /**\n   * Log a debug level message.\n   * @param message log message\n   */\n  debug(message: string) {\n    this.hubLogger.debug(message);\n  }\n\n  /**\n   * A dummy function that actually logs a debug level message.\n   * @param message log message\n   */\n  verbose(message: string) {\n    // reduce the number of actual log levels\n    this.debug(message);\n  }\n\n  /**\n   * Log a json object for debugging.\n   * @param data json data\n   * @param options logging options\n   */\n  json(data: any, options: IJsonLoggingOptions = { level: 'debug' }) {\n    this.hubLogger.json(data, options)\n  }\n\n  /**\n   * Create an expressjs middleware for HTTP request logging.\n   * @returns a logger middleware\n   */\n  createRequestLogger () {\n    return this.hubLogger.createRequestLogger()\n  }\n}\n\nexport { HubLoggerService, IHubLoggerOptions, IJsonLoggingOptions, LogLevel }"],"names":["HubLoggerService","options","hubLogger","HubLogger","log","message","info","error","trace","warn","debug","verbose","json","data","level","createRequestLogger","this","Injectable"],"mappings":"+IAOMA,+CAGQC,QACLC,UAAY,IAAIC,YAAUF,8BAOjCG,IAAA,SAAIC,QACGH,UAAUI,KAAKD,MAQtBE,MAAA,SAAMF,EAAiBG,QAChBN,UAAUK,MAAMF,EAAS,CAC5BG,MAAAA,OAQJC,KAAA,SAAKJ,QACEH,UAAUO,KAAKJ,MAOtBK,MAAA,SAAML,QACCH,UAAUQ,MAAML,MAOvBM,QAAA,SAAQN,QAEDK,MAAML,MAQbO,KAAA,SAAKC,EAAWZ,YAAAA,IAAAA,EAA+B,CAAEa,MAAO,eACjDZ,UAAUU,KAAKC,EAAMZ,MAO5Bc,oBAAA,kBACSC,KAAKd,UAAUa,4BAjEpBf,uCADLiB,gBACKjB"}