{"version":3,"file":"hub-logger.cjs.production.min.js","sources":["../src/index.ts"],"sourcesContent":["// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst winston = require('winston');\n\n/**\n * log level\n */\nexport type LogLevel = 'error' | 'warn' | 'info' | 'debug';\n\n/**\n * log data\n */\nexport type LogData = {\n  [label: string]: string | number | boolean | undefined;\n};\n\n/**\n * Hub logger options\n */\nexport interface IHubLoggerOptions {\n  /**\n   * Minimal log level. Default to info.\n   */\n  level?: LogLevel;\n  /**\n   * Global log labels that will be added into every log message\n   */\n  labels?: LogData;\n  /**\n   * Size limit (bytes) for a single log message. Default to 200 KB. To disable the\n   * auto-truncation for oversized messages, set this limit to Infinit.\n   */\n  sizeLimit?: number;\n}\n\nexport class HubLogger {\n  winstonLogger: any;\n  sizeLimit: number;\n  globalLabels: LogData;\n\n  constructor(options: IHubLoggerOptions = {}) {\n    this.sizeLimit = options.sizeLimit ?? 200 * 1000; // 200 KB\n    this.globalLabels = options.labels ?? {};\n\n    const consoleTransport = new winston.transports.Console({\n      level: options.level || 'info',\n      format: winston.format.printf(\n        (data: { message: string }) => data.message\n      ),\n      // handle uncaught node exceptions\n      handleExceptions: true,\n      // handle uncaught promise rejections\n      handleRejections: true,\n    });\n\n    this.winstonLogger = winston.createLogger({\n      transports: [consoleTransport],\n    });\n  }\n\n  private log(level: LogLevel, status: string, data?: LogData): void {\n    let formatted: string = formatLog(\n      level,\n      status,\n      Object.assign({}, this.globalLabels, data)\n    );\n\n    if (formatted.length > this.sizeLimit) {\n      formatted = `TOO LONG TRUNCATED ${formatted.slice(\n        0,\n        this.sizeLimit\n      )}`.trim();\n    }\n\n    this.winstonLogger[level](formatted);\n  }\n\n  /**\n   * Print a info-level log.\n   * @param status log status string\n   * @param data log data\n   */\n  info(status: string, data?: LogData): void {\n    this.log('info', status, data);\n  }\n\n  /**\n   * Print a debug-level log.\n   * @param status log status string\n   * @param data log data\n   */\n  debug(status: string, data?: LogData): void {\n    this.log('debug', status, data);\n  }\n\n  /**\n   * Print a warn-level log.\n   * @param status log status string\n   * @param data log data\n   */\n  warn(status: string, data?: LogData): void {\n    this.log('warn', status, data);\n  }\n\n  /**\n   * Print an error-level log.\n   * @param status log status string\n   * @param dataOrError log data or an Error object\n   */\n  error(status: string, dataOrError?: LogData | Error): void {\n    let data: LogData | undefined;\n\n    if (dataOrError instanceof Error) {\n      const error = dataOrError as Error;\n\n      data = {\n        errorName: error.name,\n        errorMessage: error.message,\n      };\n\n      if (error.stack) {\n        data.source = getErrorSource(error.stack);\n      }\n    } else {\n      data = dataOrError;\n    }\n\n    this.log('error', status, data);\n  }\n}\n\n/**\n * Find out the problematic line in the source code by analyzing the error stack.\n * @param trace Error stack trace\n * @returns the path of the problematic file and the line number\n * @example 'at request (/opt/my-service/utils/request.js:91:23)'\n */\nexport function getErrorSource(trace = ''): string {\n  const filenameAndLineNumber = /(.+?\\.js):(\\d+):\\d+/;\n  const line =\n    trace.split('\\n').find(line => filenameAndLineNumber.test(line)) || '';\n  return line.trim();\n}\n\n/**\n * Format log parameters into a log string. This method accepts the same parameters as the ones for\n * the logger methods and can be used to generate log message for testing.\n * @param level log level\n * @param status log status\n * @param data optional log data\n * @returns an one-line log string\n * @example 'level=\"info\" status=\"http-request-succeed\" timestamp=\"...\"'\n */\nexport function formatLog(level: LogLevel, status: string, data: LogData = {}) {\n  const timestamp = new Date().toISOString();\n  return (\n    Object.entries({\n      level,\n      timestamp,\n      status,\n      ...data,\n    })\n      // this properly formats objects and wraps strings in double quotes\n      .map(([key, value]) => `${key}=${JSON.stringify(value)}`)\n      .join(' ')\n  );\n}\n"],"names":["winston","require","getErrorSource","trace","filenameAndLineNumber","split","find","line","test","trim","formatLog","level","status","data","timestamp","Date","toISOString","Object","entries","map","JSON","stringify","join","options","sizeLimit","globalLabels","labels","consoleTransport","transports","Console","format","printf","message","handleExceptions","handleRejections","winstonLogger","createLogger","log","formatted","assign","this","length","slice","info","debug","warn","error","dataOrError","Error","errorName","name","errorMessage","stack","source"],"mappings":"mRACA,IAAMA,EAAUC,QAAQ,oBAuIRC,EAAeC,YAAAA,IAAAA,EAAQ,QAC/BC,EAAwB,6BAE5BD,EAAME,MAAM,MAAMC,MAAK,SAAAC,UAAQH,EAAsBI,KAAKD,OAAU,IAC1DE,gBAYEC,EAAUC,EAAiBC,EAAgBC,YAAAA,IAAAA,EAAgB,QACnEC,GAAY,IAAIC,MAAOC,qBAE3BC,OAAOC,WACLP,MAAAA,EACAG,UAAAA,EACAF,OAAAA,GACGC,IAGFM,KAAI,4BAA4BC,KAAKC,mBACrCC,KAAK,6CA5HEC,oBAAAA,IAAAA,EAA6B,SAClCC,mBAAYD,EAAQC,aAAa,SACjCC,sBAAeF,EAAQG,UAAU,OAEhCC,EAAmB,IAAI3B,EAAQ4B,WAAWC,QAAQ,CACtDlB,MAAOY,EAAQZ,OAAS,OACxBmB,OAAQ9B,EAAQ8B,OAAOC,QACrB,SAAClB,UAA8BA,EAAKmB,WAGtCC,kBAAkB,EAElBC,kBAAkB,SAGfC,cAAgBnC,EAAQoC,aAAa,CACxCR,WAAY,CAACD,gCAITU,IAAA,SAAI1B,EAAiBC,EAAgBC,OACvCyB,EAAoB5B,EACtBC,EACAC,EACAK,OAAOsB,OAAO,GAAIC,KAAKf,aAAcZ,IAGnCyB,EAAUG,OAASD,KAAKhB,YAC1Bc,yBAAkCA,EAAUI,MAC1C,EACAF,KAAKhB,YACHf,aAGD0B,cAAcxB,GAAO2B,MAQ5BK,KAAA,SAAK/B,EAAgBC,QACdwB,IAAI,OAAQzB,EAAQC,MAQ3B+B,MAAA,SAAMhC,EAAgBC,QACfwB,IAAI,QAASzB,EAAQC,MAQ5BgC,KAAA,SAAKjC,EAAgBC,QACdwB,IAAI,OAAQzB,EAAQC,MAQ3BiC,MAAA,SAAMlC,EAAgBmC,OAChBlC,EAEAkC,aAAuBC,OAGzBnC,EAAO,CACLoC,UAHYF,EAGKG,KACjBC,aAJYJ,EAIQf,SAJRe,EAOJK,QACRvC,EAAKwC,OAASnD,EARF6C,EAQuBK,SAGrCvC,EAAOkC,OAGJV,IAAI,QAASzB,EAAQC"}