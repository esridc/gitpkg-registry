{"version":3,"file":"hub-logger.cjs.production.min.js","sources":["../src/index.ts"],"sourcesContent":["import http from 'http';\nimport morgan from 'morgan';\n\n// NOTE require() is used because winston has a problem with import in TypeScript, see\n// https://github.com/winstonjs/winston/issues/1575\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst winston = require('winston');\n\n/**\n * log level\n */\nexport type LogLevel = 'error' | 'warn' | 'info' | 'debug';\n\n// higher value means the log level is more important\nconst LOG_LEVEL_SEVERITY = {\n  error: 4,\n  warn: 3,\n  info: 2,\n  debug: 1,\n};\n\n/**\n * log data\n */\nexport type LogData = {\n  [label: string]: string | number | boolean | undefined;\n};\n\n/**\n * Hub logger options\n */\nexport interface IHubLoggerOptions {\n  /**\n   * Minimal log level. Default to info.\n   */\n  level?: LogLevel;\n  /**\n   * Global log labels that will be added into every log message\n   */\n  labels?: LogData;\n  /**\n   * Size limit (bytes) for a single log message. Default to 200 KB. To disable the\n   * auto-truncation for oversized messages, set this limit to Infinit.\n   */\n  sizeLimit?: number;\n}\n\nexport class HubLogger {\n  winstonLogger: any;\n  sizeLimit: number;\n  globalLabels: LogData;\n  level: LogLevel;\n\n  constructor(options: IHubLoggerOptions = {}) {\n    this.sizeLimit = this.getSizeLimit(options.sizeLimit);\n    this.globalLabels = options.labels ?? {};\n    this.level = options.level ?? 'info';\n\n    const consoleTransport = new winston.transports.Console({\n      level: this.level,\n      format: winston.format.printf(\n        (data: { message: string }) => data.message\n      ),\n      // handle uncaught node exceptions\n      handleExceptions: true,\n      // handle uncaught promise rejections\n      // (using ts-ignore because the current type definition misses this option, see https://github.com/winstonjs/winston/issues/1927)\n      // @ts-ignore\n      handleRejections: true,\n    });\n\n    this.winstonLogger = winston.createLogger({\n      transports: [consoleTransport],\n    });\n  }\n\n  private log(level: LogLevel, status: string, data?: LogData): void {\n    const timestamp = new Date();\n    let formatted: string = formatLog(\n      level,\n      timestamp,\n      status,\n      Object.assign({}, this.globalLabels, data)\n    );\n\n    if (formatted.length > this.sizeLimit) {\n      this.warn('oversize-log-truncated', {\n        timestamp: timestamp.toISOString(),\n      });\n\n      formatted = `TOO LONG TRUNCATED ${formatted.slice(\n        0,\n        this.sizeLimit\n      )}`.trim();\n    }\n\n    this.winstonLogger[level](formatted);\n  }\n\n  private getSizeLimit(sizeLimit?: number): number {\n    const lowerLimit = 100;\n    const upperLimit = 200000; // 200 KB\n\n    sizeLimit = sizeLimit ?? upperLimit;\n\n    if (sizeLimit < lowerLimit) {\n      // apply a lower limit to avoid truncating any meaningful information\n      return lowerLimit;\n    }\n\n    if (sizeLimit > upperLimit) {\n      // apply a upper limit to satisfy AWS CloudWatch log size limit\n      return upperLimit;\n    }\n\n    return sizeLimit;\n  }\n\n  /**\n   * Print a info-level log.\n   * @param status log status string\n   * @param data log data\n   */\n  info(status: string, data?: LogData): void {\n    this.log('info', status, data);\n  }\n\n  /**\n   * Print a debug-level log.\n   * @param status log status string\n   * @param data log data\n   */\n  debug(status: string, data?: LogData): void {\n    this.log('debug', status, data);\n  }\n\n  /**\n   * Print a warn-level log.\n   * @param status log status string\n   * @param data log data\n   */\n  warn(status: string, data?: LogData): void {\n    this.log('warn', status, data);\n  }\n\n  /**\n   * Print an error-level log.\n   * @param status log status string\n   * @param dataOrError log data or an Error object\n   */\n  error(status: string, dataOrError?: LogData | Error): void {\n    let data: LogData | undefined;\n\n    if (dataOrError instanceof Error) {\n      const error = dataOrError as Error;\n\n      data = {\n        errorName: error.name,\n        errorMessage: error.message,\n      };\n\n      if (error.stack) {\n        data.source = getErrorSource(error.stack);\n      }\n    } else {\n      data = dataOrError;\n    }\n\n    this.log('error', status, data);\n  }\n\n  /**\n   * Check if a message with the given log level should be logged.\n   * @param level log level\n   * @returns\n   */\n  shouldLog(level: LogLevel): boolean {\n    return LOG_LEVEL_SEVERITY[level] >= LOG_LEVEL_SEVERITY[this.level];\n  }\n\n  private getRequestLogLevel(status: number): LogLevel {\n    if (!status || status >= 500) {\n      return 'error';\n    }\n\n    if (status >= 400) {\n      return 'warn';\n    }\n\n    return 'debug';\n  }\n\n  private getRequestLogStatus(level: LogLevel): string {\n    return level === 'debug' ? 'request-succeeded' : 'request-failed';\n  }\n\n  /**\n   * Create an Expressjs middleware for HTTP request logging.\n   * @returns\n   */\n  createRequestLogger(options: any = {}) {\n    const morganOptions: morgan.Options<\n      http.IncomingMessage,\n      http.ServerResponse\n    > = Object.assign({}, options, {\n      skip: (_: any, res: http.ServerResponse) => {\n        return !this.shouldLog(this.getRequestLogLevel(res.statusCode));\n      },\n    });\n\n    return morgan((tokens, req, res) => {\n      const method = tokens.method(req, res);\n      const url = tokens.url(req, res);\n      const statusCode = res.statusCode;\n      const timestamp = tokens.date(req, res, 'iso') as string;\n      const responseTime = Number(tokens['response-time'](req, res));\n\n      const level = this.getRequestLogLevel(res.statusCode);\n      const logStatus = this.getRequestLogStatus(level);\n\n      return formatLog(level, timestamp, logStatus, {\n        method,\n        url,\n        statusCode,\n        responseTime,\n      });\n    }, morganOptions);\n  }\n}\n\n/**\n * Find out the problematic line in the source code by analyzing the error stack.\n * @param trace Error stack trace\n * @returns the path of the problematic file and the line number\n * @example 'at request (/opt/my-service/utils/request.js:91:23)'\n */\nexport function getErrorSource(trace = ''): string {\n  const filenameAndLineNumber = /(.+?\\.js):(\\d+):\\d+/;\n  const line =\n    trace.split('\\n').find(line => filenameAndLineNumber.test(line)) || '';\n  return line.trim();\n}\n\n/**\n * Format log parameters into a log string. This method accepts the same parameters as the ones for\n * the logger methods and can be used to generate log message for testing.\n * @param level log level\n * @param timestamp log timestamp, either a Date instance or a formatted string\n * @param status log status\n * @param data optional log data\n * @returns an one-line log string\n * @example 'level=\"info\" status=\"http-request-succeed\" timestamp=\"...\"'\n */\nexport function formatLog(\n  level: LogLevel,\n  timestamp: Date | string,\n  status: string,\n  data: LogData = {}\n) {\n  const formattedTimestamp =\n    timestamp instanceof Date ? timestamp.toISOString() : timestamp;\n\n  return (\n    Object.entries({\n      level,\n      timestamp: formattedTimestamp,\n      status,\n      ...data,\n    })\n      // this properly formats objects and wraps strings in double quotes\n      .map(([key, value]) => `${key}=${JSON.stringify(value)}`)\n      .join(' ')\n  );\n}\n"],"names":["winston","require","LOG_LEVEL_SEVERITY","error","warn","info","debug","getErrorSource","trace","filenameAndLineNumber","split","find","line","test","trim","formatLog","level","timestamp","status","data","formattedTimestamp","Date","toISOString","Object","entries","map","JSON","stringify","join","options","sizeLimit","this","getSizeLimit","globalLabels","labels","consoleTransport","transports","Console","format","printf","message","handleExceptions","handleRejections","winstonLogger","createLogger","log","formatted","assign","length","slice","dataOrError","Error","errorName","name","errorMessage","stack","source","shouldLog","getRequestLogLevel","getRequestLogStatus","createRequestLogger","morganOptions","skip","_","res","_this","statusCode","morgan","tokens","req","method","url","date","responseTime","Number"],"mappings":"gWAMA,IAAMA,EAAUC,QAAQ,WAQlBC,EAAqB,CACzBC,MAAO,EACPC,KAAM,EACNC,KAAM,EACNC,MAAO,YA0NOC,EAAeC,YAAAA,IAAAA,EAAQ,QAC/BC,EAAwB,6BAE5BD,EAAME,MAAM,MAAMC,MAAK,SAAAC,UAAQH,EAAsBI,KAAKD,OAAU,IAC1DE,gBAaEC,EACdC,EACAC,EACAC,EACAC,YAAAA,IAAAA,EAAgB,QAEVC,EACJH,aAAqBI,KAAOJ,EAAUK,cAAgBL,SAGtDM,OAAOC,WACLR,MAAAA,EACAC,UAAWG,EACXF,OAAAA,GACGC,IAGFM,KAAI,4BAA4BC,KAAKC,mBACrCC,KAAK,6CA1NEC,oBAAAA,IAAAA,EAA6B,SAClCC,UAAYC,KAAKC,aAAaH,EAAQC,gBACtCG,sBAAeJ,EAAQK,UAAU,QACjClB,eAAQa,EAAQb,SAAS,WAExBmB,EAAmB,IAAInC,EAAQoC,WAAWC,QAAQ,CACtDrB,MAAOe,KAAKf,MACZsB,OAAQtC,EAAQsC,OAAOC,QACrB,SAACpB,UAA8BA,EAAKqB,WAGtCC,kBAAkB,EAIlBC,kBAAkB,SAGfC,cAAgB3C,EAAQ4C,aAAa,CACxCR,WAAY,CAACD,gCAITU,IAAA,SAAI7B,EAAiBE,EAAgBC,OACrCF,EAAY,IAAII,KAClByB,EAAoB/B,EACtBC,EACAC,EACAC,EACAK,OAAOwB,OAAO,GAAIhB,KAAKE,aAAcd,IAGnC2B,EAAUE,OAASjB,KAAKD,iBACrB1B,KAAK,yBAA0B,CAClCa,UAAWA,EAAUK,gBAGvBwB,yBAAkCA,EAAUG,MAC1C,EACAlB,KAAKD,YACHhB,aAGD6B,cAAc3B,GAAO8B,MAGpBd,aAAA,SAAaF,gBAInBA,WAAYA,KAFO,KADA,IAAA,IAUfA,EATe,IAAA,IAcZA,KAQTzB,KAAA,SAAKa,EAAgBC,QACd0B,IAAI,OAAQ3B,EAAQC,MAQ3Bb,MAAA,SAAMY,EAAgBC,QACf0B,IAAI,QAAS3B,EAAQC,MAQ5Bf,KAAA,SAAKc,EAAgBC,QACd0B,IAAI,OAAQ3B,EAAQC,MAQ3BhB,MAAA,SAAMe,EAAgBgC,OAChB/B,EAEA+B,aAAuBC,OAGzBhC,EAAO,CACLiC,UAHYF,EAGKG,KACjBC,aAJYJ,EAIQV,SAJRU,EAOJK,QACRpC,EAAKqC,OAASjD,EARF2C,EAQuBK,SAGrCpC,EAAO+B,OAGJL,IAAI,QAAS3B,EAAQC,MAQ5BsC,UAAA,SAAUzC,UACDd,EAAmBc,IAAUd,EAAmB6B,KAAKf,UAGtD0C,mBAAA,SAAmBxC,UACpBA,GAAUA,GAAU,IAChB,QAGLA,GAAU,IACL,OAGF,WAGDyC,oBAAA,SAAoB3C,SACT,UAAVA,EAAoB,oBAAsB,oBAOnD4C,oBAAA,SAAoB/B,uBAAAA,IAAAA,EAAe,QAC3BgC,EAGFtC,OAAOwB,OAAO,GAAIlB,EAAS,CAC7BiC,KAAM,SAACC,EAAQC,UACLC,EAAKR,UAAUQ,EAAKP,mBAAmBM,EAAIE,uBAIhDC,GAAO,SAACC,EAAQC,EAAKL,OACpBM,EAASF,EAAOE,OAAOD,EAAKL,GAC5BO,EAAMH,EAAOG,IAAIF,EAAKL,GACtBE,EAAaF,EAAIE,WACjBjD,EAAYmD,EAAOI,KAAKH,EAAKL,EAAK,OAClCS,EAAeC,OAAON,EAAO,iBAAiBC,EAAKL,IAEnDhD,EAAQiD,EAAKP,mBAAmBM,EAAIE,mBAGnCnD,EAAUC,EAAOC,EAFNgD,EAAKN,oBAAoB3C,GAEG,CAC5CsD,OAAAA,EACAC,IAAAA,EACAL,WAAAA,EACAO,aAAAA,MAEDZ"}