{"version":3,"file":"hub-logger.cjs.production.min.js","sources":["../src/index.ts"],"sourcesContent":["// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst winston = require('winston');\n\n/**\n * log level\n */\nexport type LogLevel = 'error' | 'warn' | 'info' | 'debug';\n\n/**\n * log data\n */\nexport type LogData = { [label: string]: string | number | boolean | undefined };\n\n/**\n * Hub logger options\n */\nexport interface IHubLoggerOptions {\n  /**\n   * Minimal log level\n   */\n  level?: LogLevel;\n  /**\n   * Global log labels that will be added into every log message\n   */\n  labels?: LogData;\n}\n\nexport class HubLogger {\n  winstonLogger: any;\n  options: IHubLoggerOptions;\n\n  constructor(options: IHubLoggerOptions = {\n  }) {\n    this.options = options;\n\n    const consoleTransport = new winston.transports.Console({\n      // show info log and above by default\n      level: options.level || 'info',\n      format: winston.format.printf(winstonFormat),\n      // handle uncaught node exceptions\n      handleExceptions: true,\n      // TODO: enable this line when this issue is fixed https://github.com/winstonjs/winston/issues/1801\n      // handle uncaught promise rejections\n      // handleRejections: true\n    });\n\n    this.winstonLogger = winston.createLogger({\n      transports: [consoleTransport]\n    });\n  }\n\n  private log(level: LogLevel, status: string, data?: LogData): void {\n    const message: { status: string, data?: LogData } = {\n      status\n    };\n    const logData = Object.assign({}, this.options.labels, data)\n\n    // only add the data if exists\n    if (Object.keys(logData).length > 0) {\n      message.data = logData;\n    }\n\n    this.winstonLogger[level](message);\n  }\n\n  /**\n   * Print a info-level log.\n   * @param status log status string\n   * @param data log data\n   */\n  info(status: string, data?: LogData): void {\n    this.log('info', status, data);\n  }\n\n  /**\n   * Print a debug-level log.\n   * @param status log status string\n   * @param data log data\n   */\n  debug(status: string, data?: LogData): void {\n    this.log('debug', status, data);\n  }\n\n  /**\n   * Print a warn-level log.\n   * @param status log status string\n   * @param data log data\n   */\n  warn(status: string, data?: LogData): void {\n    this.log('warn', status, data);\n  }\n\n  /**\n   * Print an error-level log.\n   * @param status log status string\n   * @param dataOrError log data or an Error object\n   */\n  error(status: string, dataOrError?: LogData | Error): void {\n    let data: LogData | undefined;\n\n    if (dataOrError instanceof Error) {\n      const error = dataOrError as Error;\n\n      data = {\n        errorName: error.name,\n        errorMessage: error.message\n      };\n\n      if (error.stack) {\n        data.source = getErrorSource(error.stack);\n      }\n    } else {\n      data = dataOrError;\n    }\n\n    this.log('error', status, data);\n  }\n}\n\nfunction winstonFormat(data: { level: LogLevel, message: { status: string, data?: LogData } }) {\n  return formatLog(data.level, data.message.status, data.message.data);\n}\n\n/**\n * Find out the problematic line in the source code by analyzing the error stack.\n * @param trace Error stack trace\n * @returns the path of the problematic file and the line number\n * @example 'at request (/opt/my-service/utils/request.js:91:23)'\n */\nexport function getErrorSource(trace = ''): string {\n  const filenameAndLineNumber = /(.+?\\.js):(\\d+):\\d+/;\n  const line = trace.split('\\n').find(line => filenameAndLineNumber.test(line)) || '';\n  return line.trim();\n}\n\n/**\n * Format log parameters into a log string. This method accepts the same parameters as the ones for\n * the logger methods and can be used to generate log message for testing.\n * @param level log level\n * @param timestamp log time\n * @param status log status\n * @param data optional log data\n * @returns an one-line log string\n * @example 'level=\"info\" status=\"http-request-succeed\" timestamp=\"...\"'\n */\nexport function formatLog(level: LogLevel, status: string, data: LogData = {\n}) {\n  const timestamp = new Date().toISOString();\n  return Object\n    .entries({\n      level,\n      timestamp,\n      status,\n      ...data\n    })\n    // this properly formats objects and wraps strings in double quotes\n    .map(([key, value]) => `${key}=${JSON.stringify(value)}`)\n    .join(' ');\n}\n"],"names":["winston","require","winstonFormat","data","formatLog","level","message","status","getErrorSource","trace","filenameAndLineNumber","split","find","line","test","trim","timestamp","Date","toISOString","Object","entries","map","JSON","stringify","join","options","consoleTransport","transports","Console","format","printf","handleExceptions","winstonLogger","createLogger","log","logData","assign","this","labels","keys","length","info","debug","warn","error","dataOrError","Error","errorName","name","errorMessage","stack","source"],"mappings":"mRACA,IAAMA,EAAUC,QAAQ,WAsHxB,SAASC,EAAcC,UACdC,EAAUD,EAAKE,MAAOF,EAAKG,QAAQC,OAAQJ,EAAKG,QAAQH,eASjDK,EAAeC,YAAAA,IAAAA,EAAQ,QAC/BC,EAAwB,6BACjBD,EAAME,MAAM,MAAMC,MAAK,SAAAC,UAAQH,EAAsBI,KAAKD,OAAU,IACrEE,gBAaEX,EAAUC,EAAiBE,EAAgBJ,YAAAA,IAAAA,EAAgB,QAEnEa,GAAY,IAAIC,MAAOC,qBACtBC,OACJC,WACCf,MAAAA,EACAW,UAAAA,EACAT,OAAAA,GACGJ,IAGJkB,KAAI,4BAA4BC,KAAKC,mBACrCC,KAAK,6CA9HIC,YAAAA,IAAAA,EAA6B,SAElCA,QAAUA,MAETC,EAAmB,IAAI1B,EAAQ2B,WAAWC,QAAQ,CAEtDvB,MAAOoB,EAAQpB,OAAS,OACxBwB,OAAQ7B,EAAQ6B,OAAOC,OAAO5B,GAE9B6B,kBAAkB,SAMfC,cAAgBhC,EAAQiC,aAAa,CACxCN,WAAY,CAACD,gCAITQ,IAAA,SAAI7B,EAAiBE,EAAgBJ,OACrCG,EAA8C,CAClDC,OAAAA,GAEI4B,EAAUhB,OAAOiB,OAAO,GAAIC,KAAKZ,QAAQa,OAAQnC,GAGnDgB,OAAOoB,KAAKJ,GAASK,OAAS,IAChClC,EAAQH,KAAOgC,QAGZH,cAAc3B,GAAOC,MAQ5BmC,KAAA,SAAKlC,EAAgBJ,QACd+B,IAAI,OAAQ3B,EAAQJ,MAQ3BuC,MAAA,SAAMnC,EAAgBJ,QACf+B,IAAI,QAAS3B,EAAQJ,MAQ5BwC,KAAA,SAAKpC,EAAgBJ,QACd+B,IAAI,OAAQ3B,EAAQJ,MAQ3ByC,MAAA,SAAMrC,EAAgBsC,OAChB1C,EAEA0C,aAAuBC,OAGzB3C,EAAO,CACL4C,UAHYF,EAGKG,KACjBC,aAJYJ,EAIQvC,SAJRuC,EAOJK,QACR/C,EAAKgD,OAAS3C,EARFqC,EAQuBK,SAGrC/C,EAAO0C,OAGJX,IAAI,QAAS3B,EAAQJ"}