{"version":3,"file":"hub-logger.cjs.development.js","sources":["../src/index.ts"],"sourcesContent":["// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst winston = require('winston');\n\n/**\n * log level\n */\nexport type LogLevel = 'error' | 'warn' | 'info' | 'debug';\n\n/**\n * log data\n */\nexport type LogData = {\n  [label: string]: string | number | boolean | undefined;\n};\n\n/**\n * Hub logger options\n */\nexport interface IHubLoggerOptions {\n  /**\n   * Minimal log level. Default to info.\n   */\n  level?: LogLevel;\n  /**\n   * Global log labels that will be added into every log message\n   */\n  labels?: LogData;\n  /**\n   * Size limit (bytes) for a single log message. Default to 200 KB. To disable the\n   * auto-truncation for oversized messages, set this limit to Infinit.\n   */\n  sizeLimit?: number;\n}\n\nexport class HubLogger {\n  winstonLogger: any;\n  sizeLimit: number;\n  globalLabels: LogData;\n\n  constructor(options: IHubLoggerOptions = {}) {\n    this.sizeLimit = options.sizeLimit ?? 200 * 1000; // 200 KB\n    this.globalLabels = options.labels ?? {};\n\n    const consoleTransport = new winston.transports.Console({\n      level: options.level || 'info',\n      format: winston.format.printf(\n        (data: { message: string }) => data.message\n      ),\n      // handle uncaught node exceptions\n      handleExceptions: true,\n      // handle uncaught promise rejections\n      handleRejections: true,\n    });\n\n    this.winstonLogger = winston.createLogger({\n      transports: [consoleTransport],\n    });\n  }\n\n  private log(level: LogLevel, status: string, data?: LogData): void {\n    let formatted: string = formatLog(\n      level,\n      status,\n      Object.assign({}, this.globalLabels, data)\n    );\n\n    if (formatted.length > this.sizeLimit) {\n      formatted = `TOO LONG TRUNCATED ${formatted.slice(\n        0,\n        this.sizeLimit\n      )}`.trim();\n    }\n\n    this.winstonLogger[level](formatted);\n  }\n\n  /**\n   * Print a info-level log.\n   * @param status log status string\n   * @param data log data\n   */\n  info(status: string, data?: LogData): void {\n    this.log('info', status, data);\n  }\n\n  /**\n   * Print a debug-level log.\n   * @param status log status string\n   * @param data log data\n   */\n  debug(status: string, data?: LogData): void {\n    this.log('debug', status, data);\n  }\n\n  /**\n   * Print a warn-level log.\n   * @param status log status string\n   * @param data log data\n   */\n  warn(status: string, data?: LogData): void {\n    this.log('warn', status, data);\n  }\n\n  /**\n   * Print an error-level log.\n   * @param status log status string\n   * @param dataOrError log data or an Error object\n   */\n  error(status: string, dataOrError?: LogData | Error): void {\n    let data: LogData | undefined;\n\n    if (dataOrError instanceof Error) {\n      const error = dataOrError as Error;\n\n      data = {\n        errorName: error.name,\n        errorMessage: error.message,\n      };\n\n      if (error.stack) {\n        data.source = getErrorSource(error.stack);\n      }\n    } else {\n      data = dataOrError;\n    }\n\n    this.log('error', status, data);\n  }\n}\n\n/**\n * Find out the problematic line in the source code by analyzing the error stack.\n * @param trace Error stack trace\n * @returns the path of the problematic file and the line number\n * @example 'at request (/opt/my-service/utils/request.js:91:23)'\n */\nexport function getErrorSource(trace = ''): string {\n  const filenameAndLineNumber = /(.+?\\.js):(\\d+):\\d+/;\n  const line =\n    trace.split('\\n').find(line => filenameAndLineNumber.test(line)) || '';\n  return line.trim();\n}\n\n/**\n * Format log parameters into a log string. This method accepts the same parameters as the ones for\n * the logger methods and can be used to generate log message for testing.\n * @param level log level\n * @param status log status\n * @param data optional log data\n * @returns an one-line log string\n * @example 'level=\"info\" status=\"http-request-succeed\" timestamp=\"...\"'\n */\nexport function formatLog(level: LogLevel, status: string, data: LogData = {}) {\n  const timestamp = new Date().toISOString();\n  return (\n    Object.entries({\n      level,\n      timestamp,\n      status,\n      ...data,\n    })\n      // this properly formats objects and wraps strings in double quotes\n      .map(([key, value]) => `${key}=${JSON.stringify(value)}`)\n      .join(' ')\n  );\n}\n"],"names":["winston","require","HubLogger","options","sizeLimit","globalLabels","labels","consoleTransport","transports","Console","level","format","printf","data","message","handleExceptions","handleRejections","winstonLogger","createLogger","log","status","formatted","formatLog","Object","assign","length","slice","trim","info","debug","warn","error","dataOrError","Error","errorName","name","errorMessage","stack","source","getErrorSource","trace","filenameAndLineNumber","line","split","find","test","timestamp","Date","toISOString","entries","map","key","value","JSON","stringify","join"],"mappings":"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"}