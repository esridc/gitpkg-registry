{"version":3,"file":"hub-logger.cjs.development.js","sources":["../src/index.ts"],"sourcesContent":["// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst winston = require('winston');\n\n/**\n * log level\n */\nexport type LogLevel = 'error' | 'warn' | 'info' | 'debug';\n\n/**\n * log data\n */\nexport type LogData = { [label: string]: string | number | boolean | undefined };\n\n/**\n * Hub logger options\n */\nexport interface IHubLoggerOptions {\n  /**\n   * Minimal log level\n   */\n  level?: LogLevel;\n  /**\n   * Global log labels that will be added into every log message\n   */\n  labels?: LogData;\n}\n\nexport class HubLogger {\n  winstonLogger: any;\n  options: IHubLoggerOptions;\n\n  constructor(options: IHubLoggerOptions = {\n  }) {\n    this.options = options;\n\n    const consoleTransport = new winston.transports.Console({\n      // show info log and above by default\n      level: options.level || 'info',\n      format: winston.format.printf(winstonFormat),\n      // handle uncaught node exceptions\n      handleExceptions: true,\n      // TODO: enable this line when this issue is fixed https://github.com/winstonjs/winston/issues/1801\n      // handle uncaught promise rejections\n      // handleRejections: true\n    });\n\n    this.winstonLogger = winston.createLogger({\n      transports: [consoleTransport]\n    });\n  }\n\n  private log(level: LogLevel, status: string, data?: LogData): void {\n    const message: { status: string, data?: LogData } = {\n      status\n    };\n    const logData = Object.assign({}, this.options.labels, data)\n\n    // only add the data if exists\n    if (Object.keys(logData).length > 0) {\n      message.data = logData;\n    }\n\n    this.winstonLogger[level](message);\n  }\n\n  /**\n   * Print a info-level log.\n   * @param status log status string\n   * @param data log data\n   */\n  info(status: string, data?: LogData): void {\n    this.log('info', status, data);\n  }\n\n  /**\n   * Print a debug-level log.\n   * @param status log status string\n   * @param data log data\n   */\n  debug(status: string, data?: LogData): void {\n    this.log('debug', status, data);\n  }\n\n  /**\n   * Print a warn-level log.\n   * @param status log status string\n   * @param data log data\n   */\n  warn(status: string, data?: LogData): void {\n    this.log('warn', status, data);\n  }\n\n  /**\n   * Print an error-level log.\n   * @param status log status string\n   * @param dataOrError log data or an Error object\n   */\n  error(status: string, dataOrError?: LogData | Error): void {\n    let data: LogData | undefined;\n\n    if (dataOrError instanceof Error) {\n      const error = dataOrError as Error;\n\n      data = {\n        errorName: error.name,\n        errorMessage: error.message\n      };\n\n      if (error.stack) {\n        data.source = getErrorSource(error.stack);\n      }\n    } else {\n      data = dataOrError;\n    }\n\n    this.log('error', status, data);\n  }\n}\n\nfunction winstonFormat(data: { level: LogLevel, message: { status: string, data?: LogData } }) {\n  return formatLog(data.level, data.message.status, data.message.data);\n}\n\n/**\n * Find out the problematic line in the source code by analyzing the error stack.\n * @param trace Error stack trace\n * @returns the path of the problematic file and the line number\n * @example 'at request (/opt/my-service/utils/request.js:91:23)'\n */\nexport function getErrorSource(trace = ''): string {\n  const filenameAndLineNumber = /(.+?\\.js):(\\d+):\\d+/;\n  const line = trace.split('\\n').find(line => filenameAndLineNumber.test(line)) || '';\n  return line.trim();\n}\n\n/**\n * Format log parameters into a log string. This method accepts the same parameters as the ones for\n * the logger methods and can be used to generate log message for testing.\n * @param level log level\n * @param timestamp log time\n * @param status log status\n * @param data optional log data\n * @returns an one-line log string\n * @example 'level=\"info\" status=\"http-request-succeed\" timestamp=\"...\"'\n */\nexport function formatLog(level: LogLevel, status: string, data: LogData = {\n}) {\n  const timestamp = new Date().toISOString();\n  return Object\n    .entries({\n      level,\n      timestamp,\n      status,\n      ...data\n    })\n    // this properly formats objects and wraps strings in double quotes\n    .map(([key, value]) => `${key}=${JSON.stringify(value)}`)\n    .join(' ');\n}\n"],"names":["winston","require","HubLogger","options","consoleTransport","transports","Console","level","format","printf","winstonFormat","handleExceptions","winstonLogger","createLogger","log","status","data","message","logData","Object","assign","labels","keys","length","info","debug","warn","error","dataOrError","Error","errorName","name","errorMessage","stack","source","getErrorSource","formatLog","trace","filenameAndLineNumber","line","split","find","test","trim","timestamp","Date","toISOString","entries","map","key","value","JSON","stringify","join"],"mappings":"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"}