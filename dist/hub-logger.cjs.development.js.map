{"version":3,"file":"hub-logger.cjs.development.js","sources":["../src/index.ts"],"sourcesContent":["import http from 'http';\nimport morgan from 'morgan';\nimport winston from 'winston';\n\n/**\n * log level\n */\nexport type LogLevel = 'error' | 'warn' | 'info' | 'debug';\n\n// higher value means the log level is more important\nconst LOG_LEVEL_SEVERITY = {\n  error: 4,\n  warn: 3,\n  info: 2,\n  debug: 1,\n};\n\n/**\n * log data\n */\nexport type LogData = {\n  [label: string]: string | number | boolean | undefined;\n};\n\n/**\n * Hub logger options\n */\nexport interface IHubLoggerOptions {\n  /**\n   * Minimal log level. Default to info.\n   */\n  level?: LogLevel;\n  /**\n   * Global log labels that will be added into every log message\n   */\n  labels?: LogData;\n  /**\n   * Size limit (bytes) for a single log message. Default to 200 KB. To disable the\n   * auto-truncation for oversized messages, set this limit to Infinit.\n   */\n  sizeLimit?: number;\n}\n\nexport class HubLogger {\n  winstonLogger: any;\n  sizeLimit: number;\n  globalLabels: LogData;\n  level: LogLevel;\n\n  constructor(options: IHubLoggerOptions = {}) {\n    this.sizeLimit = this.getSizeLimit(options.sizeLimit);\n    this.globalLabels = options.labels ?? {};\n    this.level = options.level ?? 'info';\n\n    const consoleTransport = new winston.transports.Console({\n      level: this.level,\n      format: winston.format.printf(\n        (data: { message: string }) => data.message\n      ),\n      // handle uncaught node exceptions\n      handleExceptions: true,\n      // handle uncaught promise rejections\n      // (using ts-ignore because the current type definition misses this option, see https://github.com/winstonjs/winston/issues/1927)\n      // @ts-ignore\n      handleRejections: true,\n    });\n\n    this.winstonLogger = winston.createLogger({\n      transports: [consoleTransport],\n    });\n  }\n\n  private log(level: LogLevel, status: string, data?: LogData): void {\n    const timestamp = new Date();\n    let formatted: string = formatLog(\n      level,\n      timestamp,\n      status,\n      Object.assign({}, this.globalLabels, data)\n    );\n\n    if (formatted.length > this.sizeLimit) {\n      this.warn('oversize-log-truncated', {\n        timestamp: timestamp.toISOString(),\n      });\n\n      formatted = `TOO LONG TRUNCATED ${formatted.slice(\n        0,\n        this.sizeLimit\n      )}`.trim();\n    }\n\n    this.winstonLogger[level](formatted);\n  }\n\n  private getSizeLimit(sizeLimit?: number): number {\n    const lowerLimit = 100;\n    const upperLimit = 200000; // 200 KB\n\n    sizeLimit = sizeLimit ?? upperLimit;\n\n    if (sizeLimit < lowerLimit) {\n      // apply a lower limit to avoid truncating any meaningful information\n      return lowerLimit;\n    }\n\n    if (sizeLimit > upperLimit) {\n      // apply a upper limit to satisfy AWS CloudWatch log size limit\n      return upperLimit;\n    }\n\n    return sizeLimit;\n  }\n\n  /**\n   * Print a info-level log.\n   * @param status log status string\n   * @param data log data\n   */\n  info(status: string, data?: LogData): void {\n    this.log('info', status, data);\n  }\n\n  /**\n   * Print a debug-level log.\n   * @param status log status string\n   * @param data log data\n   */\n  debug(status: string, data?: LogData): void {\n    this.log('debug', status, data);\n  }\n\n  /**\n   * Print a warn-level log.\n   * @param status log status string\n   * @param data log data\n   */\n  warn(status: string, data?: LogData): void {\n    this.log('warn', status, data);\n  }\n\n  /**\n   * Print an error-level log.\n   * @param status log status string\n   * @param dataOrError log data or an Error object\n   */\n  error(status: string, dataOrError?: LogData | Error): void {\n    let data: LogData | undefined;\n\n    if (dataOrError instanceof Error) {\n      const error = dataOrError as Error;\n\n      data = {\n        errorName: error.name,\n        errorMessage: error.message,\n      };\n\n      if (error.stack) {\n        data.source = getErrorSource(error.stack);\n      }\n    } else {\n      data = dataOrError;\n    }\n\n    this.log('error', status, data);\n  }\n\n  /**\n   * Check if a message with the given log level should be logged.\n   * @param level log level\n   * @returns\n   */\n  shouldLog(level: LogLevel): boolean {\n    return LOG_LEVEL_SEVERITY[level] >= LOG_LEVEL_SEVERITY[this.level];\n  }\n\n  private getRequestLogLevel(status: number): LogLevel {\n    if (!status || status >= 500) {\n      return 'error';\n    }\n\n    if (status >= 400) {\n      return 'warn';\n    }\n\n    return 'debug';\n  }\n\n  private getRequestLogStatus(level: LogLevel): string {\n    return level === 'debug' ? 'request-succeeded' : 'request-failed';\n  }\n\n  /**\n   * Create an Expressjs middleware for HTTP request logging.\n   * @returns\n   */\n  createRequestLogger(options: any = {}) {\n    const morganOptions: morgan.Options<\n      http.IncomingMessage,\n      http.ServerResponse\n    > = Object.assign({}, options, {\n      skip: (_: any, res: http.ServerResponse) => {\n        return !this.shouldLog(this.getRequestLogLevel(res.statusCode));\n      },\n    });\n\n    return morgan((tokens, req, res) => {\n      const method = tokens.method(req, res);\n      const url = tokens.url(req, res);\n      const statusCode = res.statusCode;\n      const timestamp = tokens.date(req, res, 'iso') as string;\n      const responseTime = Number(tokens['response-time'](req, res));\n\n      const level = this.getRequestLogLevel(res.statusCode);\n      const logStatus = this.getRequestLogStatus(level);\n\n      return formatLog(level, timestamp, logStatus, {\n        method,\n        url,\n        statusCode,\n        responseTime,\n      });\n    }, morganOptions);\n  }\n}\n\n/**\n * Find out the problematic line in the source code by analyzing the error stack.\n * @param trace Error stack trace\n * @returns the path of the problematic file and the line number\n * @example 'at request (/opt/my-service/utils/request.js:91:23)'\n */\nexport function getErrorSource(trace = ''): string {\n  const filenameAndLineNumber = /(.+?\\.js):(\\d+):\\d+/;\n  const line =\n    trace.split('\\n').find(line => filenameAndLineNumber.test(line)) || '';\n  return line.trim();\n}\n\n/**\n * Format log parameters into a log string. This method accepts the same parameters as the ones for\n * the logger methods and can be used to generate log message for testing.\n * @param level log level\n * @param timestamp log timestamp, either a Date instance or a formatted string\n * @param status log status\n * @param data optional log data\n * @returns an one-line log string\n * @example 'level=\"info\" status=\"http-request-succeed\" timestamp=\"...\"'\n */\nexport function formatLog(\n  level: LogLevel,\n  timestamp: Date | string,\n  status: string,\n  data: LogData = {}\n) {\n  const formattedTimestamp =\n    timestamp instanceof Date ? timestamp.toISOString() : timestamp;\n\n  return (\n    Object.entries({\n      level,\n      timestamp: formattedTimestamp,\n      status,\n      ...data,\n    })\n      // this properly formats objects and wraps strings in double quotes\n      .map(([key, value]) => `${key}=${JSON.stringify(value)}`)\n      .join(' ')\n  );\n}\n"],"names":["LOG_LEVEL_SEVERITY","error","warn","info","debug","HubLogger","options","winstonLogger","sizeLimit","globalLabels","level","getSizeLimit","labels","consoleTransport","winston","transports","Console","format","printf","data","message","handleExceptions","handleRejections","createLogger","log","status","timestamp","Date","formatted","formatLog","Object","assign","length","toISOString","slice","trim","lowerLimit","upperLimit","dataOrError","Error","errorName","name","errorMessage","stack","source","getErrorSource","shouldLog","getRequestLogLevel","getRequestLogStatus","createRequestLogger","morganOptions","skip","_","res","statusCode","morgan","tokens","req","method","url","date","responseTime","Number","logStatus","trace","filenameAndLineNumber","line","split","find","test","formattedTimestamp","entries","map","key","value","JSON","stringify","join"],"mappings":"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"}